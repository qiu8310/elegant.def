// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"elegant.def": {
		"src": {
			"lib": {
				"base.js": function (exports, module, require) {
					/**
					 * 由于此组件需要给浏览器用，所以很多函数都是为了兼容各个浏览器
					 *
					 * @module base
					 */

					/**
					 *
					 * @callback IteratorCallback
					 * @param {*} iteratorItem - 遍历对象中的单个元素
					 * @param {Number|String} iteratorKey - 数组的 index 或哈希的 key
					 * @param {Object|Array} ref - 遍历对象本身的引用
					 */

					/**
					 * 遍历一个哈希
					 *
					 * @param {Object} obj
					 * @param {IteratorCallback} fn
					 */
					exports.eachObj = function(obj, fn) {
					  for (var k in obj){
					    if (obj.hasOwnProperty(k)){
					      if (fn(obj[k], k, obj) === false) {
					        break;
					      }
					    }
					  }
					};

					/**
					 * 遍历一个数组
					 *
					 * @param {Array} arr
					 * @param {IteratorCallback} fn
					 */
					exports.eachArr = function(arr, fn) {
					  for (var i = 0; i < arr.length; ++i) {
					    if (fn(arr[i], i, arr) === false) {
					      break;
					    }
					  }
					};

					/**
					 * 返回任意一个 Object 的 type
					 *
					 * @param {*} obj
					 * @returns {String}
					 */
					exports.typeOf = function(obj) {
					  return ({}).toString.call(obj).slice(8, -1).toLowerCase();
					};

					/**
					 * 去除字符串首末的空白字符
					 *
					 * @param {String} str
					 * @returns {String}
					 */
					exports.trim = function(str) {
					  return str.trim ? str.trim() : str.replace(/^\s*|\s*$/g, '');
					};


					/**
					 * 兼容 Array.map
					 *
					 * @param {Array} arr
					 * @param {IteratorCallback} fn
					 * @returns {Array}
					 */
					exports.map = function(arr, fn) {
					  var r = [];
					  return arr.map ?
					    arr.map(fn) :
					    (exports.eachArr(arr, function(){
					      r.push(fn.apply(null, arguments));
					    }) || r);
					};

					/**
					 * 兼容 Array.filter
					 *
					 * @param {Array} arr
					 * @param {IteratorCallback} fn
					 * @returns {Array}
					 */
					exports.filter = function(arr, fn) {
					  var r = [];
					  return arr.filter ?
					    arr.filter(fn) :
					    (exports.eachArr(arr, function(i){
					      if (fn.apply(null, arguments)) {
					        r.push(i);
					      }
					    }) || r);
					};

					/**
					 * 将类似于数组的对象转换成数组
					 *
					 * @param {Object} arrLike
					 * @param {Number} [index = 0]
					 * @returns {Array}
					 */
					exports.arrify = function(arrLike, index) {
					  return [].slice.call(arrLike, index || 0);
					};

					var T = {};

					// 类型检查
					exports.eachArr('Object,Number,String,Array,Boolean,Undefined,Function'.split(','), function(key) {
					  // NaN 不属于上面的任何类型，默认的 typeOf(NaN) 返回的是 number 的，用 mix === mix 把 NaN 过滤掉
					  T['is' + key] = function(mix) { return mix === mix && exports.typeOf(mix) === key.toLowerCase(); };
					});

					/**
					 * 判断一个字符串是否是一个合法的数字
					 *
					 * @param {String} str
					 * @returns {Boolean}
					 */
					exports.isNumerical = function (str) {
					  if (str.charAt(0) === '-') { str = str.substr(1); }

					  if (/^(?:\d*\.)?\d+$/.test(str)) {
					    // 0056, 00.56, 56.00 也会符合正则的
					    if (str.indexOf('.') >= 0) {
					      // 如果小数的第一位是0，则第二位一定要是 . ； 而如果第一位不是 0，则不管 . 在第几位都有效
					      return (str.charAt(0) !== '0') || (str.charAt(1) === '.');
					    } else {
					      return str === '0' || str.charAt(0) !== '0';
					    }
					  }
					  return false;
					};

					/**
					 * 判断一个数字是否是一个合法的整数
					 *
					 * @param {Number} num
					 * @returns {Boolean}
					 */
					exports.isInt = function (num) {
					  return T.isNumber(num) && String(num).indexOf('.') === -1;
					};


					exports.merge = function(to) {
					  if (!to) { to = {}; }
					  exports.eachArr(exports.arrify(arguments, 1), function(arg) {
					    if (T.isObject(arg)) {exports.eachObj(arg, function(v, k) { to[k] = v; });}
					  });
					  return to;
					};

					exports.merge(module.exports, T);

					/**
					 * 取出某个哈希中所有的 key
					 *
					 * @param {Object} obj
					 * @returns {Array}
					 */
					exports.objectKeys = function(obj) {
					  if (Object.keys) {
					    return Object.keys(obj);
					  }
					  var keys = [];
					  exports.eachObj(obj, function(val, key) {
					    keys.push(key);
					  });
					  return keys;
					};

					/**
					 * 保证 str 包含在 { } 内
					 *
					 * @param {String} str
					 * @returns {String}
					 */
					exports.wrapInBrackets = function(str) {
					  if (str.charAt(0) !== '{') {
					    str = '{' + str;
					  }
					  if (str.charAt(str.length - 1) !== '}') {
					    str += '}';
					  }
					  return str;
					};
				},
				"option.js": function (exports, module, require) {
					/**
					 * @module option
					 */
					var _opts = {
					  //applySelf: false  // 此配置已经无用了，现在采取的是自动根据函数中是否有 self 参数来判断是否 applySelf
					};

					/**
					 *
					 * @param {String} key
					 * @param {*} val
					 * @returns {*}
					 */
					function option(key, val) {
					  if (typeof val === 'undefined') {
					    return _opts[key];
					  } else {
					    _opts[key] = val;
					  }
					}

					option.all = _opts;

					module.exports = option;
					if (typeof window !== 'undefined') { window.option = option; }
				},
				"rule-simple.js": function (exports, module, require) {
					var base = require('./base'),
					  type = require('./type');

					module.exports = {
					  /**
					   *
					   * @param {Object} parsedRule
					   * @param {Array} args
					   * @returns {Boolean}
					   */
					  match: function(parsedRule, args) {
					    var result;
					    var argsLen = args.length, okRoad;

					    base.eachArr(parsedRule.roads, function(road, j) {
					      result = {};
					      var roadIndex, argIndex = 0, param, arg;
					      for (roadIndex = 0; roadIndex < road.length; roadIndex++) {
					        param = parsedRule.params[road[roadIndex]];
					        arg = args[argIndex];
					        if (!type.is(arg, param.type) || argIndex >= argsLen) {
					          break;
					        }

					        argIndex++;
					        if (param.rest) {
					          result[param.key] = [arg];
					          while (argIndex < argsLen && type.is(args[argIndex], param.type)) {
					            result[param.key].push(args[argIndex]);
					            argIndex++;
					          }
					        } else {
					          result[param.key] = arg;
					        }
					      }

					      if (argIndex === argsLen && roadIndex === road.length) {
					        okRoad = road;
					        return false;
					      }
					    });

					    return okRoad ? result : false;
					  },

					  /**
					   * 解压缩 rule
					   * @param {Array} compressedRule
					   * @returns {{returnType: *, params: Array, roads: *}}
					   */
					  decompress: function(compressedRule) {
					    return {
					      returnType: compressedRule[0],
					      params: base.map(compressedRule[1], function(group) {
					        if (group[0] !== 1) { group.unshift(0); }
					        var rtn = {key: group[1], type: group[2], rest: group[0]};
					        if (group.length > 3) { rtn.val = group[3]; }
					        return rtn;
					      }),
					      roads: compressedRule[2]
					    };
					  }
					};
				},
				"self.js": function (exports, module, require) {
					var base = require('./base');
					var Rule = require('./rule-simple');

					/**
					 * @class Self
					 * @param {Object} values
					 * @param {Array} args
					 * @param {Object} $rule
					 * @param {Object} $defaults
					 * @param {Object} $options
					 */
					function Self(values, args, $rule, $defaults, $options) {
					  var dft = base.merge({}, $defaults);
					  base.eachArr($rule.params, function(param) {
					    if ('val' in param) { dft[param.key] = param.val; }
					  });
					  this.values = base.merge(dft, values);
					  this.arguments = args;
					  this.$rule = $rule;
					  this.$defaults = $defaults;
					  this.$options = $options;

					  var self = this;
					  base.eachObj(this.values, function(val, key) {
					    self[key] = val;
					  });
					}

					Self.prototype.$has = function(key) {
					  return (key in this.values);
					};

					Self.prototype.$get = function(key, dft) {
					  return this.$has(key) ? this.values[key] : dft;
					};

					Self.def = function(fn, cfg) {
					  return function() {
					    var binder = this;
					    var args = base.arrify(arguments), matches = false, rule;

					    // 遍历规则，看是否有匹配的，有的话立即跳出
					    base.eachArr(cfg.rules, function(r) {
					      if ((matches = Rule.match(r, args))) {
					        rule = r;
					        return false;
					      }
					    });

					    // 执行原函数
					    if (matches) {
					      var self = new Self(matches, args, rule, cfg.defaults, cfg.options);

					      return fn.apply(
					        cfg.arguments.indexOf('self') >= 0 ? binder : self,
					        base.map(cfg.arguments, function(arg) { return arg === 'self' ? self : self.$get(arg); })
					      );

					    } else {
					      throw new Error('Not found rule for arguments (' + args.join(', ') + ').');
					    }
					  };
					};


					module.exports = Self;
					if (typeof window !== 'undefined') { window.Self = Self; }
				},
				"type.js": function (exports, module, require) {
					/**
					 * @module type
					 */

					var base = require('./base');

					var type = {};

					var all = type._all = {};

					var basicTypes = '*,int,number,string,object,array,function,arguments,bool,null,nature,positive,negative'.split(','),
					  typeAliases = {
					    integer: 'int',
					    signed: 'int',
					    boolean: 'bool',
					    unsigned: 'nature'
					  };

					function normalize(type) {
					  type = type.toLowerCase();
					  return (type in typeAliases) ? typeAliases[type] : type;
					}

					function is(mix, type) {
					  type = normalize(type);
					  switch (type) {
					    case '*':
					      return true;
					    case 'int':
					      return base.isInt(mix);
					    case 'bool':
					      return base.typeOf(mix) === 'boolean';
					    case 'number':
					      return base.isNumber(mix);
					    case 'nature':
					      return base.isInt(mix) && mix >= 0;
					    case 'positive':
					      return base.isInt(mix) && mix > 0;
					    case 'negative':
					      return base.isInt(mix) && mix < 0;

					    //case 'string':
					    //case 'object':
					    //case 'array':
					    //case 'function':
					    //case 'arguments':
					    //case 'boolean':
					    //case 'null':

					    default :
					      return base.typeOf(mix) === type;
					  }
					}

					base.eachArr(basicTypes.concat(base.objectKeys(typeAliases)), function (key) { all[key] = is; });

					type.normalize = normalize;

					/**
					 * 判断 mix 是否是 type 类型
					 * @param {*} mix
					 * @param {String} type
					 * @returns {Boolean}
					 */
					type.is = function(mix, type) {
					  type = type.toLowerCase();

					  if (!(type in all)) {
					    throw new Error('type "' + type + '" not exists.');
					  }

					  return all[type](mix, type);
					};

					/**
					 * 判断是否定义了 type 类型
					 * @param {String} type
					 * @returns {Boolean}
					 */
					type.has = function(type) {
					  return type.toLowerCase() in all;
					};

					/**
					 * 注册新的类型
					 * @param {String} type
					 * @param {Function} fn
					 */
					type.type = function(type, fn) {
					  type = type.toLowerCase();
					  if (type in all) {
					    throw new Error('type "' + type + '" already exists.');
					  }

					  // 恢复默认的类型
					  if (!fn && (typeAliases[type] || basicTypes.indexOf(type))) {
					    fn = is;
					  }

					  all[type] = fn;
					};

					/**
					 * 删除某一类型
					 * @param {String} type
					 */
					type.untype = function(type) {
					  type = type.toLowerCase();

					  if (!(type in all)) {
					    throw new Error('type "' + type + '" not exists.');
					  }

					  delete all[type];
					};

					/**
					 *
					 * @alias untype
					 */
					type.unType = type.untype;

					module.exports = type;
					if (typeof window !== 'undefined') { window.type = type; }
				}
			},
			"simple.js": function (exports, module, require) {
				/**
				 * 简版的 def
				 *
				 * 不支持 heredoc，适合用在代码需要压缩的地方（代码压缩会将 heredoc 给删除了）
				 */

				var base = require('./lib/base');
				var option = require('./lib/option');
				var Rule = require('./lib/rule-simple');
				var type = require('./lib/type');
				var Self = require('./lib/self');

				/**
				 *
				 * @param {Function} fn
				 * @param {Object} cfg
				 * @returns {Function}
				 */
				function def(fn, cfg) {

				  if (!cfg) {
				    return fn;
				  }

				  cfg.rules = base.map(cfg.rules, Rule.decompress);
				  cfg.options = base.merge({}, option.all, cfg.options);
				  cfg.defaults = base.merge({}, cfg.defaults);

				  cfg.names = cfg.names || [];
				  cfg.arguments = cfg.arguments || [];

				  return Self.def(fn, cfg);
				}

				def.option = option;
				base.merge(def, type);

				module.exports = def;
				if (typeof window !== 'undefined') { window.def = def; }
			}
		}
	}
})("elegant.def/src/simple");
